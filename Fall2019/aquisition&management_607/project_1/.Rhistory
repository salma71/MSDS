# reading the url as a dataframe
tourn <- read.delim(url, header = FALSE, stringsAsFactors = FALSE)
head(tourn) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
is.data.frame(tourn)
tourn_2 <- data.frame(str_remove_all(tourn_df$V1,"(\\-+)"))
head(tourn_2) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
# now removing the extra empty rows from all the dataframe
tourn_2 <- data.frame(tourn_2[!apply(tourn_2 == "", 1, all),])
tourn_2
# now removing the extra empty rows from all the dataframe
tourn_2 <- data.frame(tourn_2[!apply(tourn_2 == "", 1, all),])
tourn_2 %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)
#%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)
#%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="120%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="110%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table)
#%>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="200%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="120%",height="300px")
#is.data.frame(new_table)
# Need to define an empty new_dataframe
new_table <- data.frame(c())
# Combining two consecutive rows into one column
for (i in 1:dim(tourn_2)[1]){
if (i %% 2 != 0) {
Part1 <- rbind(new_table$Part1, as.character(tourn_2[i,1]))
Part2 <- as.character(tourn_2[i+1,1])
binded <- data.frame(paste0(Part1, Part2))
names(binded) <- "Binded"
new_table <- rbind(new_table, binded)
}
}
head(new_table) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="120%",height="300px")
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df
colnames(splitted_df)
clean_df <- splitted_df[-c(1),]
clean_df
# check that the new generated new_table is a dataframe
is.data.frame(new_table)
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="120%",height="300px")
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="200%",height="300px")
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="50%",height="300px")
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="300%",height="300px")
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
clean_df <- splitted_df[-c(1),]
clean_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="120%",height="300px")
clean_df <- splitted_df[-c(1),]
clean_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
colnames(clean_df)
dim(clean_df)
rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
#as.data.frame(rtg_split)
colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
#rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
# extract
rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
rtg_extract
colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
#rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
# extract
#rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
#rtg_extract
colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
# extract
#rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
#rtg_extract
#colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
#rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
#rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
# extract
#rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
#rtg_extract
#colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
#rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
#rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
header_name <- c("USCF ID", "Pre", "Post")
# rename columns
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
header_name <- c("USCF ID", "Pre", "Post")
# rename columns
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
clean_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
colnames(clean_df)
# delete column 12
drop_uncleandata <- clean_df[,-c(12)]
drop_uncleandata %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
tournament_df <- cbind(drop_uncleandata, rtg_df)
tournament_df
tournament_df <- cbind(drop_uncleandata, rtg_df)
tournament_df  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
colnames(tournament_df)
#re-order the columns name
ordered_tournament_df <- tournament_df[c(1,2,11,3,21,22,12,4,5,6,7,8,9,10,13,14,14,16,17,18,19,20)]
ordered_tournament_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
final_table <- subset(ordered_tournament_df, select = c(1:7))
head(final_table)  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
final_table <- subset(ordered_tournament_df, select = c(1:7))
head(final_table)  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
final_table$avg_rtg <- 0
final_table %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="150%",height="300px")
final_table$avg_rtg <- 0
final_table %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#score table - a subset only has pair and player's name
score_df <- subset(ordered_tournament_df, select = c(1:2))
score_df
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(str_extract_all(df[j],"[[:digit:]]{1,}"))
opponent[i,j]
}
}
}
opponent_df <- data.frame(opponent = get_opponent(ordered_tournament_df))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(str_extract_all(df[j],"[[:digit:]]{1,}"))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent = get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent = get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
opponent
}
opponent_df <- data.frame(as.numeric(get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent = get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent <- get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent <- get_opponent(ordered_tournament_df)))
opponent_df
get_opponent()
get_opponent(ordered_tournament_df)
get_opponent <- function(df) {
for (j in 8:14) {
for (i in 1:nrow(df)) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent <- get_opponent(ordered_tournament_df)))
get_opponent <- function(df) {
for (i in 1:dim(df)[1]) {
for (j in 8:14) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- data.frame(as.numeric(opponent <- get_opponent(ordered_tournament_df)))
dim(ordered_tournament_df)[1]
str_extract_all(ordered_tournament_df[1,8],"[[:digit:]]{1,}")
as.numeric(str_extract_all(ordered_tournament_df[1,8],"[[:digit:]]{1,}"))
get_opponent <- function(df) {
for (i in 1:dim(df)[1]) {
for (j in 8:14) {
opponent[i] <- as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
opponent[i]
}
}
}
opponent_df <- data.frame(as.numeric(opponent <- get_opponent(ordered_tournament_df)))
opponent_df <- data.frame(c())
get_opponent <- function(df) {
for (i in 1:dim(df)[1]) {
for (j in 8:14) {
opponent[i] <- as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
opponent[i]
}
}
}
opponent_df <- cbind(score_df, get_opponent(ordered_tournament_df))
opponent_df <- data.frame(c())
get_opponent <- function(df) {
for (i in 1:dim(df)[1]) {
for (j in 8:14) {
opponent <- as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
opponent
}
}
}
opponent_df <- cbind(score_df, get_opponent(ordered_tournament_df))
opponent_df <- data.frame(c())
get_opponent <- function(df) {
for (i in 1:dim(df)[1]) {
for (j in 8:14) {
opponent[i,j] <- as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
opponent[i,j]
}
}
}
opponent_df <- cbind(score_df, get_opponent(ordered_tournament_df))
opponent_df <- data.frame(c())
get_opponent <- function(df) {
for (i in 1:dim(df)[1]) {
for (j in 8:14) {
as.numeric(unlist(str_extract_all(df[i,j],"[[:digit:]]{1,}")))
}
}
}
opponent_df <- cbind(score_df, get_opponent(ordered_tournament_df))
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
#opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7", "NGames")
opponents  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
# Eliminating NA Cases in order to continue with our calculations, NA replaced by 0.
opponents[is.na(opponents)] <- as.numeric(0)
opponents  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
final_table  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
final_df <- merge(final_table, opponents)
final_df %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
# Procedure to calculate Average Pre-Rating for each player
for (k in 3:9){
for (j in 1:dim(final_table)[1]){
for (i in 1:dim(final_table)[1]){
if (as.numeric(opponents[j,k]) == as.numeric(final_table$Pair[i])){
final_table$avg_rtg[j] <- as.numeric(final_table$avg_rtg[j]) + as.numeric(final_table$Pre[i])
}
}
}
}
final_table$avg_rtg <- round(as.numeric(final_table$avg_rtg) / as.numeric(opponents$NGames),0)
final_table  %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
