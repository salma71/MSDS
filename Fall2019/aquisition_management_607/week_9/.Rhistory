#opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
#opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
#opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
#opponents <- cbind(final_table, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
#names(opponents) <- c("Pair","Player Name","State","Total","Pre","Post", "Pts", "Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
# Finding number of games played
#for(i in 1:dim(opponents)[1]){
#    opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
#}
# Reporting  to view the opponents table
#opponents
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- unlist(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score[i] <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
for (k in rond[i]) {
opp_score[k] <- (str_extract_all(rond[i][k],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
for (k in rond[i]) {
opp_score[k] <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
for (k in rond[i]) {
opp_score[k] <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score[k]
}
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
dim(ordered_tournament_df)
ordered_tournament_df[8][1]
ordered_tournament_df[1,8]
ordered_tournament_df[1,9]
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)[1]) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
opp_score
}
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)[1]) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)[1]) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
opp_score
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
opp_score
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
}
return opp_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 1:dim(rond)) {
opp_score <- (str_extract_all(rond[j, i],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
#score table
score_df <- subset(ordered_tournament_df, select = c(1:2))
score_df
#final_table$NGames <- c(0)
#final_table
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
#names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
opponents_score
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
opponents
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7", "NGames")
opponents
colnames(opponents)
# Eliminating NA Cases in order to continue with our calculations, NA replaced by 0.
opponents[is.na(opponents)] <- as.numeric(0)
opponents
final_table
# Procedure to calculate Average Pre-Rating for each player
for (k in 3:9){
for (j in 1:dim(final_table)[1]){
for (i in 1:dim(final_table)[1]){
if (as.numeric(opponents[j,k]) == as.numeric(final_table$Pair[i])){
final_table$avg_rtg[j] <- as.numeric(final_table$avg_rtg[j]) + as.numeric(final_table$`Pre Rating`[i])
}
}
}
}
final_df <- merge(final_table, opponents, by, sort = TRUE)
final_df <- merge(final_table, opponents, sort = TRUE)
final_df
final_df <- merge(final_table, opponents, sort = FALSE)
final_df
final_df <- merge(final_table, opponents, sort = TRUE)
final_df
final_df <- merge(final_table, opponents, by.x = "Pair",by.y = "Player Name", sort = TRUE)
final_df <- merge(final_table, opponents, by.x = "State",by.y = "Total", sort = TRUE)
final_df <- merge(final_table, opponents, by = "State", sort = TRUE)
final_df <- merge(final_table, opponents)
final_df
final_df <- final_table[opponents, on = "Pair"]
final_df <- final_table[opponents, on = "pair"]
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df
colnames(splitted_df)
clean_df <- splitted_df[-c(1),]
clean_df
colnames(clean_df)
dim(clean_df)
rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
#as.data.frame(rtg_split)
colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
#rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
clean_df
colnames(clean_df)
drop_uncleandata <- clean_df[,-c(12)]
drop_uncleandata
tournament_df <- cbind(drop_uncleandata, rtg_df)
tournament_df
colnames(tournament_df)
ordered_tournament_df <- tournament_df[c(1,2,11,3,21,22,12,4,5,6,7,8,9,10,13,14,14,16,17,18,19,20)]
ordered_tournament_df
colnames(ordered_tournament_df)
final_table <- subset(ordered_tournament_df, select = c(1:7))
head(final_table)
#my_var <- c(1,2,3,4,5)
final_table$avg_rtg <- 0
final_table
#tournament_subset
#score table
score_df <- subset(ordered_tournament_df, select = c(1:2))
score_df
#final_table$NGames <- c(0)
#final_table
final_table
final_df <- final_table[opponents, on = "pair"]
final_df <- final_table[opponents, on = "Pair"]
final_df <- merge(final_table, opponents)
final_df
final_df[3, 9]
final_df[0, 9]
final_df[1, 9]
final_df[64, 9]
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:dim(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- round(as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i]) / as.numerica(final_df$NGames[i]),0)
}
}
}
final_df
final_df$avg_rtg <- 5
final_df
final_df$avg_rtg[1,9] <- 5
final_df$avg_rtg[1,9] <- 10
final_df$avg_rtg[1,9]
final_df$avg_rtg[1]
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:dim(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df
final_df$avg_rtg <- 0
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:dim(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:nrow(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df$avg_rtg
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:nrow(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:nrow(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(as.character(final_df$Pre[j])) + as.numeric(as.character(final_df$Pre[i]))
}
}
}
final_df
final_df
browser()
i
j
final_df
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(as.character(final_df$Pre[j])) + as.numeric(as.character(final_df$Pre[i]))
}
final_df
i
j
i+1
i
for (i in 1:nrow(final_df)) {
i
for (i in 1:nrow(final_df)) {
for (i in 1:nrow(final_df)) {
for (i in 1:nrow(final_df)) {
final_df
}
i
}
}
library(DATA606)
startLab(Lab7)
startLab(Lab_7)
startLab(lab7)
startLab(lab_7)
startLab(lab-7)
vignette('os3')
getLabs()
startLab(Lab7)
startLab(Lab8)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(rjson)
library(jsonlite)
library(dplyr)
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists.json",
query = list(api_key = "BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf"))
names(nyt_book_list)
json_df <- fromJSON(nyt_book_list$url) %>%
as.data.frame()
json_df <- fromJSON(nyt_book_list$url)
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists.json",
query = list(api_key = "BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf"))
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists.json")
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists.json", verbose())
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists.json",
verbose(),
query = "BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf")
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/{date}/{list}.json",
verbose(),
query = "BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf")
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/{date}/{list}.json",
verbose(),
query = list(api_key = "BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf"))
nyt_book_list
helo(package = httr)
help(package = httr)
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/{date}/{list}.json",
verbose(),
query = list(`api_key`=api_key, list = "hardcover"))
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/{date}/{list}.json",
verbose(),
query = list(`api_key`= "BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf", list = "hardcover"))
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/{date}/{list}.json",
verbose(),
query = list(api_key = `api_key`, list = "hardcover"))
api_key <- readLines("api_key.txt")
api_key <- readLines("api_key.rtf")
setwd("~/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_9")
api_key <- readLines("api_key.txt")
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/{date}/{list}.json",
verbose(),
query = list(`api_key` = api_key, list = "hardcover"))
nyt_book_list
api_key <- readLines("api_key.txt")
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/names.json",
verbose(),
query = list(`api_key` = api_key, list = "hardcover"))
nyt_book_list
api_key <- readLines("api_key.txt")[[1]]
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/names.json",
verbose(),
query = list(`api_key` = api_key, list = "hardcover"))
nyt_book_list
api_key <- readLines("api_key.txt")[[1]]
api_key
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/names.json",
verbose(),
query = list(`api_key` = api_key, list = "hardcover"))
nyt_book_list
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/names.json")
nyt_book_list
web_call <- GET('https://api.nytimes.com/svc/books/v3/lists/names.json')
web_call
x <- fromJSON("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=mueller&`api-key`=api_key")
x <- fromJSON("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=mueller&api_key="BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf"")
x <- fromJSON("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=mueller&api_key="BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf")
x <- fromJSON("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=mueller&api_key=BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf")
x <- fromJSON("https://api.nytimes.com/svc/books/v3/lists/names.json&api_key=BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf")
x <- fromJSON("https://api.nytimes.com/svc/search/v2/articlesearch.json?q=election&api-key=yourkey&api_key=BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf")
key <- 'BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf'
key
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists/names.json",
verbose(),
query = list(api_key = key))
nyt_book_list
View(nyt_book_list)
View(web_call)
View(nyt_book_list)
key <- 'BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf'
key
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists//.json",
verbose(),
query = list(api_key = key))
nyt_book_list
key <- 'BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf'
key
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists//.json",
verbose(),
query = list(api-key = key))
key <- 'BRnDpUYaARf4t6wEHdpdRQQQw7s48bMf'
key
nyt_book_list <- GET("https://api.nytimes.com/svc/books/v3/lists//.json",
verbose(),
query = list(api_key=key))
nyt_book_list
help(package.httr)
??package.httr
help(package:httr)
help(package-httr)
nyt_book_list <- GET("https://www.google.com")
nyt_book_list
