sample(bread, 5)
breads <- rep(c("red", "blue"), times = c(2, 3))
breads
sample(bread, 1)
sample(breads, 1)
sample(breads, 5)
sample(breads, 5)
sample(breads, 5)
sample(breads, 6)
events <- sample(beads, B, replace = TRUE)
prop.table(table(events))
events <- sample(breads, B, replace = TRUE)
r -v
q
quit
is.palindrome <- function(word) {
rawWord <- charToRaw(tolower(word)) ## converts to lower case
sprintf("%s is %sa palindrome", word,
c("not ", "")[identical(rawWord, rev(rawWord)) + 1])
}
is.palindrome("otto")
is.palindrome <- function (word) {
identical(word, paste(rev(strsplit(word, "")[[1]]), collapse=""))
}
is.palindrome("kayak")
is.palindrome("love")
palindrome <- function(x) stri_reverse(x)==x
palindrome(c("love","1234321","eye","oço","ąłą"))
identical("Hello,"Hello)
identical("Hello,"Hello)
exit
exit!
help
quit
quit("yes")
setwd("~/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10")
install.packages(c("caret", "caTools", "doMC", "dplyr", "e1071", "knitr", "R.cache", "R.utils", "readtext", "rpart.plot", "stringi", "stringr", "tidytext", "tidyverse", "tm"))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(R.utils)
library(tidyverse)
install.packages("tidyverse")
library(R.utils)
library(tidyverse)
library(tidytext)
library(readtext)
library(stringr)
library(tm)
install.packages("tm")
library(R.utils)
library(tidyverse)
library(tidytext)
library(readtext)
library(stringr)
library(tm)
library(rpart)
library(rpart.plot)
library(e1071)
library(dplyr)
library(caret)
# Library for parallel processing
library(doMC)
registerDoMC(cores=detectCores())
library(R.cache)
library(R.utils)
library(tidyverse)
library(tidytext)
library(readtext)
library(stringr)
library(tm)
library(rpart)
library(rpart.plot)
library(e1071)
library(dplyr)
library(caret)
# Library for parallel processing
library(doMC)
registerDoMC(cores=detectCores())
library(knitr)
base_url_spam <- "https://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2"
spam_zip <- "20030228_spam_2.tar.bz2"
spam_tar <- "20030228_spam_2.tar"
base_url_ham <- "https://spamassassin.apache.org/old/publiccorpus/20030228_easy_ham_2.tar.bz2"
ham_zip <- "20030228_easy_ham_2.tar.bz2"
ham_tar <- "20030228_easy_ham_2.tar"
if(!file.exists(spam_tar)){
res_spam <- tryCatch(download.file(base_url_spam,
destfile= spam_folder,
method="curl"),
error=function(e) 1)
bunzip2(spam_zip)
untar(spam_tar, exdir="spam_ham_documents")
}
if(!file.exists(ham_tar)){
res_ham <- tryCatch(download.file(base_url_ham,
destfile= ham_folder,
method="curl"),
error=function(e) 1)
bunzip2(ham_zip)
untar(ham_tar, exdir = "spam_ham_documents")
} else {
paste("The file is already exists!")
}
clean_cache(clean = TRUE)
base_dir <- "/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10/spam_ham_documents"
email_content <- NA
get_content <- function(type) {
files_path <- paste(base_dir,type, sep = "/")
files_name <- list.files(files_path)
for (file in 1:length(files_name)) {
file_path <- paste(files_path, files_name[file], sep = "/")
content_per_file <- file_path %>%
lapply(readLines)
email_content <- c(email_content, content_per_file)
}
return(email_content)
}
spam_test <- get_content("spam_2") #list
knitr::opts_chunk$set(echo = TRUE)
base_url_spam <- "https://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2"
spam_zip <- "20030228_spam_2.tar.bz2"
spam_tar <- "20030228_spam_2.tar"
base_url_ham <- "https://spamassassin.apache.org/old/publiccorpus/20030228_easy_ham_2.tar.bz2"
ham_zip <- "20030228_easy_ham_2.tar.bz2"
ham_tar <- "20030228_easy_ham_2.tar"
if(!file.exists(spam_tar)){
res_spam <- tryCatch(download.file(base_url_spam,
destfile= spam_folder,
method="curl"),
error=function(e) 1)
bunzip2(spam_zip)
untar(spam_tar, exdir="spam_ham_documents")
}
if(!file.exists(ham_tar)){
res_ham <- tryCatch(download.file(base_url_ham,
destfile= ham_folder,
method="curl"),
error=function(e) 1)
bunzip2(ham_zip)
untar(ham_tar, exdir = "spam_ham_documents")
} else {
paste("The file is already exists!")
}
clean_cache(clean = TRUE)
base_url_spam <- "https://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2"
spam_zip <- "20030228_spam_2.tar.bz2"
spam_tar <- "20030228_spam_2.tar"
base_url_ham <- "https://spamassassin.apache.org/old/publiccorpus/20030228_easy_ham_2.tar.bz2"
ham_zip <- "20030228_easy_ham_2.tar.bz2"
ham_tar <- "20030228_easy_ham_2.tar"
if(!file.exists(spam_tar)){
res_spam <- tryCatch(download.file(base_url_spam,
destfile= spam_folder,
method="curl"),
error=function(e) 1)
bunzip2(spam_zip)
untar(spam_tar, exdir="spam_ham_documents")
}
if(!file.exists(ham_tar)){
res_ham <- tryCatch(download.file(base_url_ham,
destfile= ham_folder,
method="curl"),
error=function(e) 1)
bunzip2(ham_zip)
untar(ham_tar, exdir = "spam_ham_documents")
} else {
paste("The file is already exists!")
}
base_dir <- "/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10/spam_ham_documents"
email_content <- NA
get_content <- function(type) {
files_path <- paste(base_dir,type, sep = "/")
files_name <- list.files(files_path)
for (file in 1:length(files_name)) {
file_path <- paste(files_path, files_name[file], sep = "/")
content_per_file <- file_path %>%
lapply(readLines)
email_content <- c(email_content, content_per_file)
}
return(email_content)
}
spam_test <- get_content("spam_2") #list
get_nested_content <- function(list_name) {
nested_value <- NA
for (value in 2:length(list_name)) {
value_per_row <- list_name[[value]]
nested_value <- c(nested_value, value_per_row)
}
return(nested_value)
}
spam_content <- get_nested_content(spam_test)
base_dir <- "/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10/spam_ham_documents"
email_content <- NA
get_content <- function(type) {
files_path <- paste(base_dir,type, sep = "/")
files_name <- list.files(files_path)
for (file in 1:length(files_name)) {
file_path <- paste(files_path, files_name[file], sep = "/")
content_per_file <- file_path %>%
lapply(readLines)
email_content <- c(email_content, content_per_file)
}
return(email_content)
}
spam_test <- get_content("spam_2")
base_dir <- "/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10/spam_ham_documents"
email_content <- NA
get_content <- function(type) {
files_path <- paste(base_dir,type, sep = "/")
files_name <- list.files(files_path)
for (file in 1:length(files_name)) {
file_path <- paste(files_path, files_name[file], sep = "/")
content_per_file <- file_path %>%
lapply(readLines)
email_content <- c(email_content, content_per_file)
}
return(email_content)
}
base_dir <- "/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10/spam_ham_documents"
email_content <- NA
get_content <- function(type) {
files_path <- paste(base_dir,type, sep = "/")
files_name <- list.files(files_path)
for (file in 1:length(files_name)) {
file_path <- paste(files_path, files_name[file], sep = "/")
content_per_file <- file_path %>%
lapply(readLines)
email_content <- c(email_content, content_per_file)
}
return(email_content)
}
spam_test <- get_content("spam_2") #list
getwd()
