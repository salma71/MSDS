}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
#opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
#opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
#opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
#opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
#opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
#opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
#opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
#opponents <- cbind(final_table, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
#names(opponents) <- c("Pair","Player Name","State","Total","Pre","Post", "Pts", "Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
# Finding number of games played
#for(i in 1:dim(opponents)[1]){
#    opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
#}
# Reporting  to view the opponents table
#opponents
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- unlist(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score[i] <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
opp_score <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
for (k in rond[i]) {
opp_score[k] <- (str_extract_all(rond[i][k],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
for (k in rond[i]) {
opp_score[k] <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 8:14) {
for (k in rond[i]) {
opp_score[k] <- (str_extract_all(rond[i],"[[:digit:]]{1,}"))
}
opp_score[k]
}
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
dim(ordered_tournament_df)
ordered_tournament_df[8][1]
ordered_tournament_df[1,8]
ordered_tournament_df[1,9]
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)[1]) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
opp_score
}
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)[1]) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)[1]) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
opp_score
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
opp_score
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
}
return opp_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 8:14) {
opp_score <- (str_extract_all(rond[i, j],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
# Creating the opponent values from the unsplitted data frame
get_opp_score <- function(rond) {
for (i in 1:dim(rond)) {
for (j in 1:dim(rond)) {
opp_score <- (str_extract_all(rond[j, i],"[[:digit:]]{1,}"))
}
}
opp_score
}
opponents_score <- data.frame(opp_score = get_opp_score(ordered_tournament_df))
opponents_score
#score table
score_df <- subset(ordered_tournament_df, select = c(1:2))
score_df
#final_table$NGames <- c(0)
#final_table
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
#names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
opponents_score
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7")
opponents
opponent1 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round`,"[[:digit:]]{1,}")))
opponent2 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.1`,"[[:digit:]]{1,}")))
opponent3 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.2`,"[[:digit:]]{1,}")))
opponent4 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.3`,"[[:digit:]]{1,}")))
opponent5 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.4`,"[[:digit:]]{1,}")))
opponent6 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.5`,"[[:digit:]]{1,}")))
opponent7 <- data.frame(as.numeric(str_extract_all(ordered_tournament_df$`Round.6`,"[[:digit:]]{1,}")))
# Creeating Opponents data frame.
opponents <- cbind(score_df, opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7)
# Finding number of games played
for(i in 1:dim(opponents)[1]){
opponents$NGames[i] <- 7 - as.numeric(sum(is.na(opponents[i,])))
}
# Reporting  to view the opponents table
opponents
names(opponents) <- c("Pair","Player Name","Opp 1","Opp 2","Opp 3","Opp 4","Opp 5","Opp 6","Opp 7", "NGames")
opponents
colnames(opponents)
# Eliminating NA Cases in order to continue with our calculations, NA replaced by 0.
opponents[is.na(opponents)] <- as.numeric(0)
opponents
final_table
# Procedure to calculate Average Pre-Rating for each player
for (k in 3:9){
for (j in 1:dim(final_table)[1]){
for (i in 1:dim(final_table)[1]){
if (as.numeric(opponents[j,k]) == as.numeric(final_table$Pair[i])){
final_table$avg_rtg[j] <- as.numeric(final_table$avg_rtg[j]) + as.numeric(final_table$`Pre Rating`[i])
}
}
}
}
final_df <- merge(final_table, opponents, by, sort = TRUE)
final_df <- merge(final_table, opponents, sort = TRUE)
final_df
final_df <- merge(final_table, opponents, sort = FALSE)
final_df
final_df <- merge(final_table, opponents, sort = TRUE)
final_df
final_df <- merge(final_table, opponents, by.x = "Pair",by.y = "Player Name", sort = TRUE)
final_df <- merge(final_table, opponents, by.x = "State",by.y = "Total", sort = TRUE)
final_df <- merge(final_table, opponents, by = "State", sort = TRUE)
final_df <- merge(final_table, opponents)
final_df
final_df <- final_table[opponents, on = "Pair"]
final_df <- final_table[opponents, on = "pair"]
into <- c("Pair", "Player Name","Total","Round","Round.1","Round.2","Round.3","Round.4","Round.5","Round.6","State","USCF ID / Rtg (Pre>Post)","Pts","1","2", "3","4","5","6", "7")
splitted_df <- separate(new_table, Binded, into, sep = "\\|")
splitted_df
colnames(splitted_df)
clean_df <- splitted_df[-c(1),]
clean_df
colnames(clean_df)
dim(clean_df)
rtg_extract <- str_extract_all(clean_df$`USCF ID / Rtg (Pre>Post)`, "\\b\\d{1,}")
#as.data.frame(rtg_split)
colnames(rtg_extract, do.NULL = FALSE)
#<- c("USCF ID", "Pre", "Post")
rtg_split <- str_split_fixed(rtg_extract, "[[:punct:]]\\s+", 3)
#rtg_split
rtg_df <- data.frame(as.character(str_remove_all(rtg_extract, "[[:punct:],c]")))
rtg_df
is.data.frame(rtg_df)
header_name <- c("USCF ID", "Pre", "Post")
# rename colums
colnames(rtg_df)
names(rtg_df)[names(rtg_df) == "as.character.str_remove_all.rtg_extract......punct...c...."] <- "years"
rtg_df <- separate(rtg_df, years, header_name, sep = " ")
rtg_df
clean_df
colnames(clean_df)
drop_uncleandata <- clean_df[,-c(12)]
drop_uncleandata
tournament_df <- cbind(drop_uncleandata, rtg_df)
tournament_df
colnames(tournament_df)
ordered_tournament_df <- tournament_df[c(1,2,11,3,21,22,12,4,5,6,7,8,9,10,13,14,14,16,17,18,19,20)]
ordered_tournament_df
colnames(ordered_tournament_df)
final_table <- subset(ordered_tournament_df, select = c(1:7))
head(final_table)
#my_var <- c(1,2,3,4,5)
final_table$avg_rtg <- 0
final_table
#tournament_subset
#score table
score_df <- subset(ordered_tournament_df, select = c(1:2))
score_df
#final_table$NGames <- c(0)
#final_table
final_table
final_df <- final_table[opponents, on = "pair"]
final_df <- final_table[opponents, on = "Pair"]
final_df <- merge(final_table, opponents)
final_df
final_df[3, 9]
final_df[0, 9]
final_df[1, 9]
final_df[64, 9]
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:dim(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- round(as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i]) / as.numerica(final_df$NGames[i]),0)
}
}
}
final_df
final_df$avg_rtg <- 5
final_df
final_df$avg_rtg[1,9] <- 5
final_df$avg_rtg[1,9] <- 10
final_df$avg_rtg[1,9]
final_df$avg_rtg[1]
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:dim(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df
final_df$avg_rtg <- 0
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:dim(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:nrow(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df$avg_rtg
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:nrow(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(final_df$Pre[j]) + as.numeric(final_df$Pre[i])
}
}
}
final_df
# Procedure to calculate Average Pre-Rating for each player
for (i in 1:nrow(final_df)) {
for (j in 9:15) {
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(as.character(final_df$Pre[j])) + as.numeric(as.character(final_df$Pre[i]))
}
}
}
final_df
final_df
browser()
i
j
final_df
if(final_df[i,j] == final_df$Pair) {
final_df$avg_rtg[i] <- as.numeric(as.character(final_df$Pre[j])) + as.numeric(as.character(final_df$Pre[i]))
}
final_df
i
j
i+1
i
for (i in 1:nrow(final_df)) {
i
for (i in 1:nrow(final_df)) {
for (i in 1:nrow(final_df)) {
for (i in 1:nrow(final_df)) {
final_df
}
i
}
}
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
library(tidyverse)
library(tidytext)
library(stringr)
library(tm)
base_url_spam <- "https://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2"
spam_folder <- "20030228_spam_2.tar.bz2"
spam_files <- "20030228_spam_2.tar"
base_url_ham <- "https://spamassassin.apache.org/old/publiccorpus/20030228_easy_ham_2.tar.bz2"
ham_folder <- "20030228_easy_ham_2.tar.bz2"
ham_files <- "20030228_easy_ham_2.tar"
if(!file.exists(spam_files)){
res <- tryCatch(download.file(base_url_spam,
destfile= spam_folder,
method="auto"),
error=function(e) 1)
bunzip2(spam_folder)
untar(spam_files, exdir="spam_ham_documents")
} else if(!file.exists(ham_files)){
res <- tryCatch(download.file(base_url_ham,
destfile= ham_folder,
method="auto"),
error=function(e) 1)
bunzip2(ham_folder)
untar(ham_files, exdir = "spam_ham_documents")
} else {
paste("The file is already exists!")
}
setwd('/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_1')
#spam_docs <- list.files('spam_2')
#ham_docs <- list.files('easy_ham_2')
setwd("~/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_10")
working_path <- getwd()
full_path <- file.path(working_path)
working_dir <- dir(full_path)
doc_corpus <- VCorpus(DirSource(working_dir))
doc_corpus
working_dir
working_path <- setwd('/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_1/spam_ham_documents/spam_2')
getwd()
working_path <- setwd('/Users/salmaelshahawy/Desktop/MSDS_2019/Fall2019/aquisition_management_607/week_1/spam_ham_documents/spam_2')
file.path("~", "week_10", "spam_ham_documents")
dir("~/week_10/spam_ham_documents")
dir("././spam_ham_documents")
dir("./././spam_2")
dir("././.")
dir("././")
dir("././spam_ham_documents")
dir("./././spam_2")
dir("././../spam_2")
dir("././spam_ham_documents/spam_2")
getwd()
full_path <- file.path("././spam_ham_documents/spam_2")
working_dir <- dir(full_path)
doc_corpus <- VCorpus(DirSource(working_dir))
full_path
DirSource(full_path)
getwd()
full_path <- file.path("././spam_ham_documents/spam_2")
doc_corpus <- VCorpus(DirSource(full_path))
full_path <- file.path("././spam_ham_documents/spam_2")
doc_corpus <- VCorpus(DirSource(full_path))
summary(doc_corpus)
full_path <- file.path("././spam_ham_documents/spam_2")
doc_corpus <- VCorpus(DirSource(full_path))
#summary(doc_corpus)
toVCorpus <- function(file_path) {
corpus <- file_path %>%
paste(., list.files(.), sep = "/") %>%          # Create a vector of file paths
lapply(readLines) %>%                           # Read the text in each file
VectorSource() %>%                              # Turn into VectorSource
VCorpus()                                       # Turn into VCorpus
return(corpus)
}
toVCorpus(spam_2)
Corpus()
corpus
file_path
# for the spam folder
full_path <- file.path("././spam_ham_documents/spam_2")
spam_corpus <- VCorpus(DirSource(full_path))
#summary(spam_corpus)
# for the spam folder
spam_path <- file.path("././spam_ham_documents/spam_2")
spam_corpus <- VCorpus(DirSource(spam_path))
#summary(spam_corpus)
##############
# for the ham folder
ham_path <- file.path("././spam_ham_documents/easy_ham_2")
ham_corpus <- VCorpus(DirSource(ham_path))
#summary(spam_corpus)
cleanDoc <- function(corpus) {
corpus <- corpus %>%
tm_map(removeNumbers) %>%                       # Remove numbers
tm_map(removePunctuation) %>%                   # Remove punctuation symbols
tm_map(tolower) %>%                             # Transform  to lowercase
tm_map(PlainTextDocument) %>%                   # Transform back to PlainTextDocument
tm_map(removeWords, stopwords("en")) %>%        # Remove stopwords
tm_map(stripWhitespace) %>%                     # Remove white spaces
tm_map(stemDocument)                            #Reduce to stems
return(corpus)
}
addTag <- function(corpus, tag, value){
for (i in 1:length(corpus)){
meta(corpus[[i]], tag) <- value                    # Add the value to the specified tag
}
return(corpus)
}
